/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type CenterLocation = "Australia" | "Nepal" | "UK" | "USA";

export type EventType = "BODHIPUSPANJALI" | "REFUGE";

export type GenderType = "female" | "male" | "other" | "prefer_not_to_say";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type PersonTitle = "dharma_dhar" | "sahayak_dharmacharya" | "sahayak_samathacharya";

export type PersonType = "attended_orientation" | "contact" | "interested" | "new_inquiry" | "sangha_member";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Account {
  accessToken: string | null;
  accessTokenExpiresAt: Timestamp | null;
  accountId: string;
  createdAt: Timestamp;
  id: string;
  idToken: string | null;
  password: string | null;
  providerId: string;
  refreshToken: string | null;
  refreshTokenExpiresAt: Timestamp | null;
  scope: string | null;
  updatedAt: Timestamp;
  userId: string;
}

export interface Event {
  createdAt: Generated<Timestamp | null>;
  createdBy: string;
  description: string | null;
  endDate: Timestamp;
  id: Generated<string>;
  lastUpdatedBy: string;
  metadata: Generated<Json | null>;
  name: string;
  startDate: Timestamp;
  type: EventType;
  updatedAt: Generated<Timestamp | null>;
}

export interface Group {
  createdAt: Generated<Timestamp | null>;
  createdBy: string;
  description: string | null;
  id: Generated<string>;
  lastUpdatedBy: string;
  name: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface Person {
  address: string;
  center: CenterLocation;
  /**
   * Country of residence
   */
  country: string | null;
  createdAt: Generated<Timestamp | null>;
  createdBy: string;
  emailId: string | null;
  firstName: string;
  gender: GenderType | null;
  /**
   * Whether the person has a membership card (for Sangha members)
   */
  hasMembershipCard: boolean | null;
  id: Generated<string>;
  /**
   * Preferred language for communication
   */
  languagePreference: string | null;
  lastName: string;
  lastUpdatedBy: string;
  /**
   * Current membership status (for Sangha members)
   */
  membershipStatus: string | null;
  /**
   * Nationality of the person
   */
  nationality: string | null;
  phoneNumber: string | null;
  photo: string | null;
  refugee: boolean;
  /**
   * Dharma name given during refuge ceremony (for Sangha members)
   */
  refugeName: string | null;
  /**
   * Dharma title for Sangha members
   */
  title: PersonTitle | null;
  type: Generated<PersonType>;
  updatedAt: Generated<Timestamp | null>;
  yearOfBirth: number | null;
  /**
   * Year when refuge was taken (for Sangha members)
   */
  yearOfRefuge: number | null;
}

export interface PersonGroup {
  addedBy: string;
  groupId: string;
  id: Generated<string>;
  joinedAt: Generated<Timestamp | null>;
  personId: string;
}

export interface SchemaMigrations {
  version: string;
}

export interface Session {
  createdAt: Timestamp;
  expiresAt: Timestamp;
  id: string;
  ipAddress: string | null;
  token: string;
  updatedAt: Timestamp;
  userAgent: string | null;
  userId: string;
}

export interface User {
  createdAt: Timestamp;
  email: string;
  emailVerified: boolean;
  id: string;
  image: string | null;
  name: string;
  updatedAt: Timestamp;
}

export interface Verification {
  createdAt: Timestamp | null;
  expiresAt: Timestamp;
  id: string;
  identifier: string;
  updatedAt: Timestamp | null;
  value: string;
}

export interface DB {
  account: Account;
  event: Event;
  group: Group;
  person: Person;
  person_group: PersonGroup;
  schema_migrations: SchemaMigrations;
  session: Session;
  user: User;
  verification: Verification;
}
